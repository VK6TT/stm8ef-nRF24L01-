\ changed $HW to erase buffer with spaces so that the count and
\ retries saved into mybuff typed correctly at RX end

\res MCU: STM8S103
\res export BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7
\res export PB_ODR PB_DDR PB_CR1 PB_CR2

#require ]B!

NVM

: $HW  ( -- )
   mybuff P0_width $20 FILL \ erase buffer
   $" Hello World" COUNT  ( --- a1 n1 )
   mybuff SWAP CMOVE
   ;

: @retries  ( --- n1 )
   $08 nRF@1   \ get count of lost packets:retries
   $0F AND     \ mask off lost packets
;

: FlashLed  ( n -- )
   16 SWAP - 0
   DO
      LED.ON   10 ms
      LED.Off  40 ms
   LOOP
   ;

: TX.PWR0  ( -- )  \ Set to 0dBm output and 250kbps
   [ $0 BIT5 >HIGH BIT2 >HIGH BIT1 >HIGH ] LITERAL R.RF_SETUP nRF!1
   ;

: n>str  ( n1 --- a1 n2 )  <# #S #> ;

: n>buff ( a1 n1 --- ) \ store n1 as a string at offset n1 in mybuff
   n>str \ a1 a2 n2
   ROT mybuff +
   SWAP
   CMOVE
   ;
: SetAddress \ LSB first
   $E7 $D6 $C5 $B4 $A3 
   5 0 do 
      I mybuff + c!
      loop
   mybuff 5 b>p0addr
   ;
: PAYLOAD.TX  ( -- )  \ send n bytes as set by P0_width
   mybuff P0_WIDTH b>tx DROP
   ;
: PingSetup
   nRF24init \ setup_pins, spiOn
   SetAddress
   P0_WIDTH SetPL_width
   SET.tx
   TX.PWR0
   $70 SetRF_CH
   \ ARD: retransmit delay, ARC: retries
   [ ( ARD: 250us* ) $80 ( ARC: n* ) $F + ] LITERAL R.SETUP_RETR nRF!1
   $HW 
   ;
: Ping1  ( -- )
   PingSetup
   0 BEGIN
      1+ 20 OVER n>buff
      PAYLOAD.TX
      40 ms \ allow time for RF link to do it's thing
      @retries   DUP 27 SWAP n>buff   FlashLed
      1000 ms
      FLUSHTX
      ?RX  \ input on serial line
      IF 32 = ELSE 0 THEN  \ only if it is a space char do we exit
   UNTIL
   DROP
   ;

' Ping1 'Boot !
RAM
