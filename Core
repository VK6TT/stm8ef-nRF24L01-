\ temporary dependencies

#require ]B!
#require ]C!

\ definitions *********************************************

\res MCU: nRF24L01

\ get nRF24L01+ bit masks
\res export BIT0 BIT1 BIT2 BIT3 BIT4 BIT5 BIT6 BIT7

\ get nRF24L01+ registers
\res export R.CONFIG R.SETUP_RETR R.RF_CH R.RF_SETUP
\res export R.STATUS R.RX_ADDR_P0 R.TX_ADDR R.RX_PW_P0

\ get nRF24L01+ commands
\res export R_RX_PAYLOAD W_TX_PAYLOAD W_ACK_PAYLOAD
\res export FLUSH_TX FLUSH_RX

NVM

\ bit and variable manipulation ***************************

: >LOW  ( c1 bitn ---- c2 )  \ set bitn low
   NOT AND
   ;

: >HIGH  ( c1 bitn ---- c2 )  \ set bitn high
   OR
   ;

\ talk to nRF24L01+ ***************************************

: (nrf@!)  ( c1 -- )
   _CSN.LOW SPI DROP
   ;

: nRF@1  ( c1 -- c2 )  \ fetch the contents of register c1
   (nrf@!) 0 SPI ( c2 )
   _CSN.HIGH
   ;

: nRF!0  ( c1 -- )  \ send command c1
   (nrf@!)
   _CSN.HIGH
   ;

: nRF!1  ( c1 c2 -- )  \ write c1 to register c2
   ( c2 ) $20 OR (nrf@!) ( c1 ) SPI DROP
   _CSN.HIGH
   ;

\ lets setup nrf24L01+ how we want ************************

: SetPL_width  ( c -- )  \ set bytes in rx payload
   R.RX_PW_P0  nRF!1
   ;

: R@Config  ( -- c1 )  \ fetch config reg
   R.CONFIG  nRF@1
   ;

: R!Config  ( c1 -- )  \ write C1 to config reg
   R.CONFIG  nRF!1
   ;

: RfSetup  ( c -- )  \  BIT5 -> set -18dBm outp. / 250kbps
   R.RF_SETUP nRF!1
   ;

: SetRF_CH  ( -- ) \ set channel
   R.RF_CH nRF!1
   ;

: >Standby1  ( -- )  \ enter Standby state
   _CE.LOW
   R@CONFIG [ BIT1 ( PWR_UP ) BIT2 ( CRC0 ) OR ] LITERAL >HIGH R!CONFIG
   2 ms
   ;

: PWR.Dn  ( -- )
   _CE.LOW R@Config  BIT1 >LOW R!Config
   ;

: FlushRx  ( -- )
   FLUSH_RX nRF!0
   ;

: FlushTx  ( -- )
   FLUSH_TX nRF!0
   ;

: ClrInt  ( -- )
   $70  R.STATUS nRF!1  \ 0b01110000
   ;

: _CE.HD  ( -- )
   \ set CE high and pause
   _CE.HIGH   13 *10us
   ;

: Set.RX  ( -- )
   \ set as a receiver
   R@Config BIT0 >HIGH  R!CONFIG
   ;

: Set.TX  ( -- )  \  set as a transmitter
   R@Config BIT0 >LOW  R!CONFIG
   ;

: nRF24Init  ( -- )  \ stuff we must do after a reset or power on
   setup_pins    \ set up pins and SPI (RST)
   _CSN.HIGH 1 SPIon
   100 ms        \ delay after power-on reset (spec fig. 3)
   FlushRx FlushTx ClrInt
   ;

: b>nRF ( a n CMD -- s )  \  copy n chars from a to payload register on nRF24
   _CSN.LOW SPI ( a n -- s ) >R
   0 DO
      DUP C@ SPI DROP 1+
   LOOP _CSN.HIGH
   ( a -- ) DROP R> ( -- s )
   ;

: nRF>b ( b c CMD -- s )
   \  copy count c bytes from payload register on nRF24 to buffer b
   \  return nRF24 STATUS s
   _CSN.LOW SPI ( a n s -- ) >R
   0 DO
      -1 SPI OVER C! 1+
   LOOP  _CSN.HIGH
   ( -- a ) DROP R> ( -- s )
   ;

: b>tx ( b c -- s )
   \  copy c bytes from buffer b to TX payload and send, return STATUS
   W_TX_PAYLOAD b>nRF
   _CE.HD _CE.LOW  \  10us minimum, using 130uS
   ;

: b>ack ( b c p -- s )
   \  copy c bytes payload from buffer b to p ACK pipe p, return STATUS
   W_ACK_PAYLOAD OR b>nRF
   ;

: rx>b ( b c -- s )
   \  copy c bytes payload to buffer b, return STATUS
   R_RX_PAYLOAD nRF>b
   ;

: b>p0addr ( b c -- )  \  Set pipe0 address (PRX or PTX w/ ACK payload)
   2DUP
   [ R.TX_ADDR     $20 OR ] LITERAL b>nRF DROP
   [ R.RX_ADDR_P0  $20 OR ] LITERAL b>nRF DROP
   ;

RAM
